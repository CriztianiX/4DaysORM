{"name":"4DaysORM","tagline":"Lua 4Days ORM for sqlite3 and mysql","body":"# Lua 4Days ORM 10 minutes tutorial #\r\n\r\n## Database configuration ##\r\n\r\nBefore the beginning you should add some simple settings to your database configuration. You must create some global variable `DB`:\r\n\r\n```lua\r\nDB = {}\r\n```\r\n\r\n**Development configurations:**\r\n\r\n1. `new` - if this value is `true`, then previous database was removed and new  was created (*`true` by default*).\r\n2. `backtrace` - if this value is `true`, than you will be able to see in console all Warnings, Errors and Information messages (*`true` by default*).\r\n3. `DEBUG` - if this value is `true`, you will be able to see in console all SQL queries (*`true` by default*).\r\n\r\n**Database configurations**\r\n\r\n1. `type` - by default `\"sqlite3\"`. Also it can be:\r\n    - `\"mysql\"` - for MySQL database\r\n    - `\"postgres\"` - for PostgreSQL database (*implemented soon*)\r\n2. `name` - this is a path to database file for `\"sqlite3\"`. For other databases this value contains database name. (*by default `\"database.db\"`*)\r\n3. `username` - database user name (*by default `nil`*)\r\n4. `password` - database password (*by default `nil`*)\r\n5. `host` - database host (*by default `nil`*)\r\n6. `port` - database host port  (*by default `nil`*)\r\n\r\n\r\n----------\r\n\r\n\r\nAfter setting configurations you can add 2 modules import to your file\r\n\r\n```lua\r\nlocal Table = require(\"orm.model\")\r\nlocal fields = require(\"orm.tools.fields\")\r\n```\r\n\r\n## Create table ##\r\n\r\n\r\n```lua\r\nlocal User = Table({\r\n    __tablename__ = \"user\",\r\n    username = fields.CharField({max_length = 100, unique = true}),\r\n    password = fields.CharField({max_length = 50, unique = true}),\r\n    age = fields.IntegerField({max_length = 2, null = true}),\r\n    job = fields.CharField({max_length = 50, null = true}),\r\n    time_create = fields.DateTimeField({null = true})\r\n})\r\n```\r\n\r\nFor every table is created a column `id` with `PRIMARY KEY` field by default.\r\n\r\n`__tablename__` is required value which should contain the name of the table.\r\n\r\nAlso you can add different settings to your table fields\r\n\r\n1. `max_length` - it is a maximum allowable value of symbols that you can use in a string\r\n2. `unique` - if this value is `true ` then all the column's values are unique \r\n3. `null` - can be `true` or `false`. If value is `true` then value in table will be saved as `NULL`.\r\n4. `default` - if you didn't add any value to this field - it is going to be saved as default value.\r\n5. `primary_key` - If you want to add some value as `primary key`, you can set this value as `true`.\r\n\r\n## Types of table fields ##\r\n\r\nSupported types of table fields\r\n\r\n1. `CharField` - Creates `VARCHAR` field\r\n2. `IntegerField` - Creates `INTEGER` field\r\n3. `TextField` - Creates `TEXT` field\r\n4. `BooleanField` - Creates `BOOLEAN` field\r\n5. `DateTimeField` - Creates `INTEGER` field but brings back `os.date` instance \r\n6. `PrimaryField` - Creates `INTEGER` field with `PRIMARY KEY`\r\n7. `ForeignKey` - Creates relationships between tables. \r\n\r\nAlso you can create your types of table fields. But about it later.\r\n\r\n## Create data ##\r\n\r\nTry to create a new user:\r\n\r\n```lua\r\nlocal user = User({\r\n    username = \"Bob Smith\",\r\n    password = \"SuperSecretPassword\",\r\n    time_create = os.time()\r\n})\r\n```\r\n\r\nNow you created new user, but it was not added to database. You can add him.\r\n\r\n\r\n```lua\r\nuser:save()\r\n```\r\n\r\nNow this user with all the information is in database. We can get his `id`\r\n\r\n```lua\r\nprint(\"User \" .. user.username .. \" has id \" .. user.id)\r\n-- User Bob Smith has id 1\r\n```\r\n\r\n## Update data ##\r\n\r\nYou can change your data:\r\n\r\n\r\n```lua\r\nuser.username = \"John Smith\"\r\n```\r\n\r\nThis value was changed in model, but it has not been changed in database table.\r\n\r\n\r\n```lua\r\nuser:save()\r\n```\r\n\r\nNow try to get new username for user:\r\n\r\n\r\n```lua\r\nprint(\"New user name is \" .. user.username) -- New user name is John Smith \r\n```\r\n\r\nYou have updated in database only the column that you changed.\r\nYou can also edit columns for the value by another terms:\r\n\r\n\r\n```lua\r\nUser.get:where({time_create__null = true})\r\n        :update({time_create = os.time()})\r\n```\r\n\r\n*The conditions will be described in the next chapter*\r\n\r\n## Remove data ##\r\n\r\nAnd also you can remove your data from table.\r\n\r\n\r\n```lua\r\nuser:delete()\r\n```\r\n\r\nYou can also delete columns for the value by another terms:\r\n\r\n\r\n```lua\r\n-- add test user\r\nuser = User({username = \"SomebodyNew\", password = \"NotSecret\"})\r\nuser:save()\r\n\r\nUser.get:where({username = \"SomebodyNew\"}):delete()\r\n```\r\n\r\n*The conditions will be described in the next chapter*\r\n\r\n## Get data ##\r\n\r\nAlso we can get data from table. But before this let's create 5 test users.\r\n\r\n\r\n```lua\r\nuser = User({username = \"First user\", password = \"secret1\", age = 22})\r\nuser:save()\r\n\r\nuser = User({username = \"Second user\", password = \"secret_test\", job = \"Lua developer\"})\r\nuser:save()\r\n\r\nuser = User({username = \"Another user\", password = \"old_test\", age = 44})\r\nuser:save()\r\n\r\nuser = User({username = \"New user\", password = \"some_passwd\", age = 23, job = \"Manager\"})\r\nuser:save()\r\n\r\nuser = User({username = \"Old user\", password = \"secret_passwd\", age = 44})\r\nuser:save()\r\n```\r\n\r\nAnd now try get **one of them**:\r\n\r\n\r\n```lua\r\nlocal first_user = User.get:first()\r\nprint(\"First user name is: \" .. first_user.username)\r\n-- First user name is: First user\r\n```\r\n\r\nBut also we can **get all users** from table:\r\n\r\n\r\n```lua\r\nlocal users = User.get:all()\r\nprint(\"We get \" .. users:count() .. \" users\")\r\n-- We get 5 users\r\n```\r\n\r\nMethod `count` returns number of users in the list.\r\n\r\n### Limit and Offset ###\r\n\r\nSometime we need to get not one but not all users. For the first, try to get first 2 users from the table.\r\n\r\n\r\n```lua\r\nusers = User.get:limit(2):all()\r\nprint(\"We get \" .. users:count() .. \" users\")\r\n-- We get 2 users\r\nprint(\"Second user name is: \" .. users[2].username)\r\n-- Second user name is: Second user\r\n```\r\n\r\nGreat! But if we want to get next two users? We can do this by using following example:\r\n\r\n```lua\r\nusers = User.get:limit(2):offset(2):all()\r\nprint(\"Second user name is: \" .. users[2].username)\r\n-- Second user name is: New user\r\n```\r\n\r\n### Order result ###\r\n\r\nAlso you can sort your result by order. We want to sort users from the oldest to the youngest.\r\n\r\n\r\n```lua\r\nusers = User.get:order_by({desc('age')}):all()\r\nprint(\"First user id: \" .. users[1].id)\r\n-- First user id: 3\r\n```\r\n\r\nBut we have 2 users with age 44. We can order them by name.\r\n\r\n```lua\r\nusers = User.get:order_by({desc('age'), asc('username')}):all()\r\n```\r\n    \r\nYou can order your table query by other parameters too.\r\n\r\n### Group result ###\r\n\r\nAnd now try to group your results:\r\n\r\n```lua\r\nusers = User.get:group_by({'age'}):all()\r\nprint('Find ' .. users:count() ..' users')\r\n-- Find 4 users\r\n```\r\n\r\n### Where and Having ###\r\n\r\nThese two methods have the same syntax. But `having` you can use only with `group_by `method. There's one simple example:\r\n\r\n\r\n```lua\r\nuser = User.get:where({username = \"First user\"}):first()\r\nprint(\"User id is: \" .. user.id) -- User id is: 1\r\n```\r\n\r\nAnd the same for `having`:\r\n\r\n```lua\r\nusers = User.get:group_by({'id'}):having({age = 44}):all()\r\nprint(\"We get \" .. users:count() .. \" users with age 44\")\r\n-- We get 2 users with age 44\r\n```\r\n\r\nGreat! But what if we need to do more operations than just a differentiation of table fields. We can do that! This is the list with some rules:\r\n\r\n*For example we use for default `colname`. It can be any column in your model*\r\n\r\n1. `colname = value` - the same as `colname = value` \r\n2. `colname__lt = value` - the same as `colname < value` *(`value` must be a number)*\r\n3. `colname__lte = value` - the same as `colname <= value` *(`value` must be a number)*\r\n4. `colname__gt = value` - the same as `colname > value` *(`value` must be a number)*\r\n5. `colname__gte = value` - the same as `colname >= value` *(`value` must be a number)*\r\n6. `colname__in = {v1, v2,...,vn}` - the same as `colname in (value1, value2,...,vn)` *(`vn` can be number, string)*\r\n7. `colname__notin = {v1, v2,...,vn}` - the same as `colname not in (value1, value2,...,vn)` *(`vn` can be number, string)*\r\n8. `colname__null = value` - if value is `true` then result is `colname is NULL`, but if value is `false` then result is `colname is not NULL`\r\n    \r\n### Super SELECT ###\r\n\r\nBut if we do ...\r\n\r\n```lua\r\nuser = User.get:where({age__lt = 30,\r\n                       age__lte = 30,\r\n                       age__gt = 10,\r\n                       age__gte = 10\r\n                })\r\n                :order_by({asc('id')})\r\n                :group_by({'age', 'password'})\r\n                :having({id__in = {1, 3, 5},\r\n                         id__notin = {2, 4, 6},\r\n                         username__null = false\r\n                    })\r\n                :limit(2)\r\n                :offset(1)\r\n                :all()\r\n```\r\n\r\nThis example doesn't make sense. But it works!\r\n\r\n### JOIN TABLES ###\r\n\r\nNow we can create a join of tables. But before that we create some table with  `foreign key` column:\r\n\r\n\r\n```lua\r\nlocal News = Table({\r\n    __tablename__ = \"group\",\r\n    title = fields.CharField({max_length = 100, unique = false, null = false}),\r\n    text = fields.TextField({null = true}),\r\n    create_user_id = fields.ForeignKey({to = User})\r\n})\r\n```\r\n\r\nAnd add two test news:\r\n\r\n\r\n```lua\r\nlocal user = User.get:first()\r\n\r\nlocal news = News({title = \"Some news\", create_user_id = user.id})\r\nnews:save()\r\n\r\nnews = News({title = \"Other title\", create_user_id = user.id})\r\nnews:save()\r\n```\r\n\r\nNow try to get all the news from the owner.\r\n\r\n```lua\r\nlocal news = News.get:join(User):all()\r\nprint(\"First news user id is: \" .. news[1].user.id) -- First news user id is: 1\r\n```\r\n\r\nBut if we want to get all users and also to get three news for each user . We can do this by following example:\r\n\r\n```lua\r\nlocal user = User.get:join(News):first()\r\nprint(\"User \" .. user.id .. \" has \" .. user.news_all:count() .. \" news\")\r\n-- User 1 has 2 news\r\n    \r\nfor _, user_news in pairs(user.news_all) do\r\n    print(user_news.title)\r\nend\r\n-- Some news\r\n-- Other title\r\n```\r\n\r\nIf you want to get all the values from tables you can combine table's names and prefix \"_all\". Like in previous example\r\n\r\n```lua\r\nuser.news_all\r\n```\r\n\r\n`news_all` - returns a list of all news for current user or `nil` if news does not exist.\r\n\r\n## Create column types ##\r\n\r\nWe can create a field type for every table. Try to create EmailField type:\r\n\r\n```lua\r\nfields.EmailField = fields:register({\r\n    __type__ = \"varchar\",\r\n    settings = {\r\n        max_length = 100\r\n    },\r\n    validator = function (value)\r\n        return value:match(\"[A-Za-z0-9%.%%%+%-]+@[A-Za-z0-9%.%%%+%-]+%.%w%w%w?%w?\")\r\n    end,\r\n    to_type = function (value)\r\n        return value\r\n    end,\r\n    as = function (value)\r\n        return \"'\" .. value .. \"'\"\r\n    end\r\n})\r\n```\r\n\r\nLet's make it step by step:\r\n\r\n`__type__` - this variable creates the appropriate type in the database (`\"varchar\"`, `\"integer\"`, `\"boolean\"`, `\"date\"`, `\"datetime\"`, `\"text\"`, ...).\r\nBy default this value is `\"varchar\"`.\r\n\r\n`settings` -set a field value as default (*fields settings was describe later*). By default this value is empty.\r\n\r\n`validator` - validates the value of the variable. If value is correct - returns `true`. If value is not correct it returns `false` and doesn't update or add rows. By default it always returns `true`.\r\n\r\n`to_type` - parses value for correct sql save. By default it is not parsed value\r\n\r\n`as` - returns the value from lua to SQL. By default it is not parsed value.\r\n\r\n```lua\r\nlocal UserEmails = Table({\r\n    __tablename__ = \"user_emails\",\r\n    email = fields.EmailField(),\r\n    user_id = fields.ForeignKey()\r\n})\r\n\r\nlocal user_email = UserEmails({\r\n    email = \"mailexample.com\",\r\n    user_id = user.id\r\n})\r\nuser_email:save()\r\n-- Not save!\r\n\r\n-- And try again\r\nlocal user_email = UserEmails({\r\n    email = \"mail@example.com\",\r\n    user_id = user.id\r\n})\r\nuser_email:save()\r\n-- This email added!\r\n    \r\nuser_email.email = \"not email\"\r\nuser_email:save()\r\n-- Not update\r\n    \r\nuser_email.email = \"valid@email.com\"\r\nuser_email:save()\r\n-- Update!\r\n```\r\n\r\n## Final ##\r\n\r\nAll code you can see in example.lua file. Feel free to use it! Good luck!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}